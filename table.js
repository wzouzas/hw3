/* 
    Course: COMP.4610 GUI Programming I
    Name: William Zouzas
    Email: william_zouzas@student.uml.edu
    Date Created: 10/13/2021

    File: table.js
    GUI Assignment: HW3 Creating an Interactive Dynamic Table
    File Description: This file contains functions that take user input from the form created in index.html and then create a multiplication table with those values. The function in this file both displays the values and also calculates the result by multiplying the entered range of numbers. There are three for-loops in this function. The first will display the column header numbers. The next is for adding rows to the multiplication table. Finally, the nested for-loop inside this for-loop calculates and writes the data by multiplying the column and row values. The content is cleared each time the user presses the button on the form. In order to start this JavaScript code, the user must press the button "Generate Multiplication Table". This was achieved by using the "onclick" functionality of JavaScript. The beginning part of this JavaScript file validates the user input by checking if there is missing data from the form, if the values are indeed numbers, if those numbers are integers, if the numbers are within the correct range, and a final check to make sure the minimum values are less than the maximum values entered in the form.

    Copyright (c) 2021 by William. All rights reserved. May be freely copied or excerpted for educational purposes with credit to the author.
    Updated by WZ on 10/24/21
*/

document.getElementById("clickMe").onclick = function () { 

    // Clear content of multiplication table to make room for new table generated by user input
    // This will also clear any prior error messages
    clearContent();

    // Initialize values entered by user
    var columnMin = document.getElementById("columnMin").value;
    var columnMax = document.getElementById("columnMax").value;
    var rowMin = document.getElementById("rowMin").value;
    var rowMax = document.getElementById("rowMax").value;

    /* Start Form Validation */

    // Create Element for Error Message in HTML webpage
    var errorMessage = document.getElementById("errorMessage");
    var p = document.createElement('p');

    // Check if any values in the form are left empty
    if(columnMin == "" || columnMax == "" || rowMin == "" || rowMax == "") {
        p.innerHTML = 'MISSING VALUES: Please enter all the values requested in the form. Do not leave any entry empty.';
        errorMessage.appendChild(p);
        return;
    }

    // Check if there are any characters in the form and notify the user    
    if (isNaN(columnMin) || isNaN(columnMax) || isNaN(rowMin) || isNaN(rowMax)) {
        p.innerHTML = 'INVALID INPUT: The form only takes integers as valid input.';
        errorMessage.appendChild(p);
        return;
    }

    // Check if the numbers are decimals and round the decimals to the nearest integer
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
    if (!(Number.isInteger(columnMin))) {
        columnMin = Math.round(columnMin);
    }
    if (!(Number.isInteger(columnMax))) {
        columnMax = Math.round(columnMax);
    }
    if (!(Number.isInteger(rowMin))) {
        rowMin = Math.round(rowMin);
    }
    if (!(Number.isInteger(rowMax))) {
        rowMax = Math.round(rowMax);
    }

    // Check that the minimum and maximum integers are between -50 and 50
    if (columnMin < -50 || columnMin > 50 || columnMax < -50 || columnMax > 50) {
        p.innerHTML = 'INVALID INPUT: The values you enter must fall between -50 and 50.';
        errorMessage.appendChild(p);
        return;
    }
    if (rowMin < -50 || rowMin > 50 || rowMax < -50 || rowMax > 50) {
        p.innerHTML = 'INVALID INPUT: The values you enter must fall between -50 and 50.';
        errorMessage.appendChild(p);
        return;
    }
    
    // Swap the values in the form if the minimum is greater than the maximum
    if (columnMin > columnMax) {
        var temp = columnMin;
        columnMin = columnMax;
        columnMax = temp;
    }
    if (rowMin > rowMax) {
        var temp = rowMin;
        rowMin = rowMax;
        rowMax = temp;
    }

    /* End Form Validation */

    // Create the elements needed to display the table on the webpage
    var tableDisplaySection = document.getElementById("result");
    var table = document.createElement('TABLE');
    var tableBody = document.createElement('TBODY');
    table.appendChild(tableBody);

    // Display column header values above table
    var tr = document.createElement('TR');
    var td = document.createElement('TD');
    td.width = '75';
    tr.appendChild(td);
    for(var j = columnMin; j <= columnMax; j++) {
        td = document.createElement('TD');
        td.width = '75'; 
        td.appendChild(document.createTextNode(j));
        tr.appendChild(td);
    }
    tableBody.appendChild(tr);

    // Calculate values and display table body using two for-loops
    var value;
    for (var i = rowMin; i <= rowMax; i++) {
        
        // Create a new row element to display the data
        tr = document.createElement('TR');
        td = document.createElement('TD');
        
        // Set width for space between columns
        td.width = '75';
        
        // Add new row element in table
        td.appendChild(document.createTextNode(i));
        tr.appendChild(td);
        tableBody.appendChild(tr);
        
        // Display and calculate the data values in the table
        for (var j = columnMin; j <= columnMax; j++) {
            td = document.createElement('TD');
            td.width = '75';
            value = i * j;
            td.appendChild(document.createTextNode(value));
            tr.appendChild(td);
        }
    }
    // Add the resulting table to the appriopriate section in HTML
    tableDisplaySection.appendChild(table);
}

/* 
Function used to clear the multiplication table when a new table is generated
This function also clears any error messages that were displayed after the user tried to generate a table with invalid data
Source: https://www.geeksforgeeks.org/how-to-clear-the-content-of-a-div-using-javascript/
*/
function clearContent() {
    document.getElementById("result").innerHTML = "";
    document.getElementById("errorMessage").innerHTML = "";
}